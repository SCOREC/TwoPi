# This CMakeLists.txt is to generate shared lib of scotch, ptscoth
#
#
# clang -shared -o libscotcherr.dylib  -Wl,-force_load libscotcherr.a
# clang -shared -o libscotch.dylib  -Wl,-force_load libscotch.a  -lscotcherr -lz -lm
# clang -shared -o libscotchmetis.dylib -L./ -lscotch -Wl,-all_load -lscotchmetis  -Wl,-noall_load
# mpicc -shared -o libptscotcherrexit.dylib -L./ -Wl,-all_load -lptscotcherrexit  -Wl,-noall_load
# mpicc -shared -o libptscotch.dylib -L./ -Wl,-all_load -lptscotch  -Wl,-noall_load -lptscotcherr -lscotch
# mpicc -shared -o libptscotchparmetis.dylib -L./ -Wl,-all_load -lptscotchparmetis  -Wl,-noall_load -lptscotch -lptscotcherr -lscotch

cmake_minimum_required(VERSION 2.8.10)

project(SCOTCH)

find_package(ZLIB REQUIRED)
find_package(MPI  REQUIRED)

message("MPI_C_LINK_FLAGS " ${MPI_C_LINK_FLAGS})

if (APPLE)
    set(SHARED_SC_COMPILE_FLAGS "-fPIC ")
    set(SHARED_SC_LINK_FLAGS_1 "-Wl,-force_load")
    set(SHARED_SC_LINK_FLAGS_2 "")
    set(CMAKE_BUILD_WITH_INSTALL_NAME_DIR true)  # this writes full path using install_name_dir  
else()
    set(SHARED_SC_COMPILE_FLAGS "-fPIC")
    set(SHARED_SC_LINK_FLAGS_1 "-Wl,-whole-archive")
    set(SHARED_SC_LINK_FLAGS_2 "-Wl,-no-whole-archive")
endif()

set( SCERR_STATIC ${CMAKE_INSTALL_PREFIX}/lib/libscotcherr.a )
set( SCERREXIT_STATIC ${CMAKE_INSTALL_PREFIX}/lib/libscotcherrexit.a )
set( SC_STATIC ${CMAKE_INSTALL_PREFIX}/lib/libscotch.a )
set( SCMETIS_STATIC ${CMAKE_INSTALL_PREFIX}/lib/libscotchmetis.a )
set( ESMUMPS_STATIC ${CMAKE_INSTALL_PREFIX}/lib/libesmumps.a )

set( PTSCERR_STATIC ${CMAKE_INSTALL_PREFIX}/lib/libptscotcherr.a )
set( PTSCERREXIT_STATIC ${CMAKE_INSTALL_PREFIX}/lib/libptscotcherrexit.a )
set( PTSC_STATIC ${CMAKE_INSTALL_PREFIX}/lib/libptscotch.a )
set( PTSCPMETIS_STATIC ${CMAKE_INSTALL_PREFIX}/lib/libptscotchparmetis.a )
set( PTESMUMPS_STATIC ${CMAKE_INSTALL_PREFIX}/lib/libptesmumps.a )

# Create an empty cpp file to use as a stand-in for cpp sources in the library
set (EMPTY_CPP ${CMAKE_CURRENT_BINARY_DIR}/empty.c)
file(WRITE ${EMPTY_CPP} "// This is an empty file generated by cmake" )

# scotcherr
add_library(scotcherr SHARED ${EMPTY_CPP})
target_link_libraries(scotcherr ${SHARED_SC_LINK_FLAGS_1}
                            ${SCERR_STATIC}
			    ${SHARED_SC_LINK_FLAGS_2} )
set_target_properties(scotcherr PROPERTIES 
                      COMPILE_FLAGS ${SHARED_SC_COMPILE_FLAGS}
                      OUTPUT_NAME scotcherr )
install(TARGETS scotcherr
        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
        )
	
# scotcherrexit
add_library(scotcherrexit SHARED ${EMPTY_CPP})
target_link_libraries(scotcherrexit ${SHARED_SC_LINK_FLAGS_1}
                            ${SCERREXIT_STATIC}
			    ${SHARED_SC_LINK_FLAGS_2} )
set_target_properties(scotcherrexit PROPERTIES 
                      COMPILE_FLAGS ${SHARED_SC_COMPILE_FLAGS}
                      OUTPUT_NAME scotcherrexit )
install(TARGETS scotcherrexit
        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
        )

# scotch
add_library(scotch SHARED ${EMPTY_CPP})
add_dependencies( scotch scotcherr )
set_target_properties(scotch PROPERTIES 
                      COMPILE_FLAGS ${SHARED_SC_COMPILE_FLAGS}
                      OUTPUT_NAME scotch)

target_link_libraries(scotch ${SHARED_SC_LINK_FLAGS_1}
                         ${SC_STATIC}
			 ${SHARED_SC_LINK_FLAGS_2}
			 $<TARGET_FILE:scotcherr>
			 z m)
install(TARGETS scotch
        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
        )


# scotchmetis
add_library(scotchmetis SHARED ${EMPTY_CPP})
add_dependencies( scotchmetis scotch scotcherr )
set_target_properties(scotchmetis PROPERTIES 
                      COMPILE_FLAGS ${SHARED_SC_COMPILE_FLAGS}
                      OUTPUT_NAME scotchmetis)

target_link_libraries(scotchmetis ${SHARED_SC_LINK_FLAGS_1}
                         ${SCMETIS_STATIC}
			 ${SHARED_SC_LINK_FLAGS_2}
 			 $<TARGET_FILE:scotch>
			 $<TARGET_FILE:scotcherr>
			 z m)
install(TARGETS scotchmetis
        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
        )


# ptscotcherr
add_library(ptscotcherr SHARED ${EMPTY_CPP})
target_link_libraries(ptscotcherr ${SHARED_SC_LINK_FLAGS_1}
                            ${PTSCERR_STATIC}
			    ${SHARED_SC_LINK_FLAGS_2}
			    ${MPI_C_LIBRARIES}
			    )
set_target_properties(ptscotcherr PROPERTIES 
                      COMPILE_FLAGS ${SHARED_SC_COMPILE_FLAGS}
                      OUTPUT_NAME ptscotcherr )
if(MPI_C_LINK_FLAGS)
  set_target_properties(ptscotcherr PROPERTIES
    LINK_FLAGS "${MPI_C_LINK_FLAGS}")
endif()

install(TARGETS ptscotcherr
        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
	)
	
# PT-scotcherrexit
add_library( ptscotcherrexit SHARED ${EMPTY_CPP})
target_link_libraries(ptscotcherrexit ${SHARED_SC_LINK_FLAGS_1}
                            ${PTSCERREXIT_STATIC}
			    ${SHARED_SC_LINK_FLAGS_2}
			    ${MPI_C_LIBRARIES}
			    )
set_target_properties(ptscotcherrexit PROPERTIES 
                      COMPILE_FLAGS ${SHARED_SC_COMPILE_FLAGS}
                      OUTPUT_NAME ptscotcherrexit )
if(MPI_C_LINK_FLAGS)
  set_target_properties(ptscotcherrexit PROPERTIES
    LINK_FLAGS "${MPI_C_LINK_FLAGS}")
endif()
		      
install(TARGETS ptscotcherrexit
        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
        )

# PT-scotch
add_library(ptscotch SHARED ${EMPTY_CPP})
add_dependencies( ptscotch ptscotcherr scotch)
set_target_properties(ptscotch PROPERTIES 
                      COMPILE_FLAGS ${SHARED_SC_COMPILE_FLAGS}
                      OUTPUT_NAME ptscotch)
if(MPI_C_LINK_FLAGS)
  set_target_properties(ptscotch PROPERTIES
    LINK_FLAGS "${MPI_C_LINK_FLAGS}")
endif()

target_link_libraries(ptscotch ${SHARED_SC_LINK_FLAGS_1}
                         ${PTSC_STATIC}
			 ${SHARED_SC_LINK_FLAGS_2}
			 $<TARGET_FILE:ptscotcherr>
			 $<TARGET_FILE:scotch>			 
   		         ${MPI_C_LIBRARIES}			 
			 z m)
install(TARGETS ptscotch
        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
        )


# PT-scotchparmetis
add_library(ptscotchparmetis SHARED ${EMPTY_CPP})
add_dependencies( ptscotchparmetis ptscotch ptscotcherr scotch )
set_target_properties(ptscotchparmetis PROPERTIES 
                      COMPILE_FLAGS ${SHARED_SC_COMPILE_FLAGS}
                      OUTPUT_NAME ptscotchparmetis)
if(MPI_C_LINK_FLAGS)
  set_target_properties(ptscotchparmetis PROPERTIES
    LINK_FLAGS "${MPI_C_LINK_FLAGS}")
endif()

target_link_libraries(ptscotchparmetis ${SHARED_SC_LINK_FLAGS_1}
                         ${PTSCPMETIS_STATIC}
			 ${SHARED_SC_LINK_FLAGS_2}
 			 $<TARGET_FILE:ptscotch>
			 $<TARGET_FILE:ptscotcherr>
			 $<TARGET_FILE:scotch>			 
			 z m)
install(TARGETS ptscotchparmetis
        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
        )

# esmumps
add_library(esmumps SHARED ${EMPTY_CPP})
add_dependencies( esmumps scotch scotcherr )
set_target_properties(esmumps PROPERTIES 
                      COMPILE_FLAGS ${SHARED_SC_COMPILE_FLAGS}
                      OUTPUT_NAME esmumps)
target_link_libraries(esmumps ${SHARED_SC_LINK_FLAGS_1}
                         ${ESMUMPS_STATIC}
			 ${SHARED_SC_LINK_FLAGS_2}
 			 $<TARGET_FILE:scotch>
			 $<TARGET_FILE:scotcherr>
			 z m)
install(TARGETS esmumps
        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
        )


# ptesmump
add_library(ptesmumps SHARED ${EMPTY_CPP})
add_dependencies(ptesmumps ptscotch ptscotcherr)
set_target_properties(ptesmumps PROPERTIES 
                      COMPILE_FLAGS ${SHARED_SC_COMPILE_FLAGS}
                      OUTPUT_NAME ptesmumps)
if(MPI_C_LINK_FLAGS)
  set_target_properties(ptesmumps PROPERTIES
    LINK_FLAGS "${MPI_C_LINK_FLAGS}")
endif()

target_link_libraries(ptesmumps ${SHARED_SC_LINK_FLAGS_1}
                         ${PTESMUMPS_STATIC}
			 ${SHARED_SC_LINK_FLAGS_2}
 			 $<TARGET_FILE:ptscotch>
			 $<TARGET_FILE:ptscotcherr>
			 z m)
install(TARGETS ptesmumps
        DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
        )
      
