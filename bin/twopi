#!/bin/bash
#  twopi user frontend script
#  
#  usage: 
#     clone: clone (or pull) source
#         twopi clone <component> <optional_arguments>
#
#     build: build component from source. Typically it calls either
#            make, cmake, or python setup.py 
#         twopi build <component> <optional_arguments>
#
#     clean: delete files used to install a component
#         default action will delete build files, such as calling
#         rm -rf * in cmake build directory
#         -all will delete the entire source directory
#
#         twopi build <component>
#         twopi build <component> -all
#
#     install: do clone -> build (with options) -> clean

MODE="$1"
COMPONENT="$2"
BUILDCOMPONENT=$(dirname "$BASH_SOURCE")/../scripts/buildcomponent.sh 

if [ "$MODE" = "clone" ]; then
    EXTRA="${@:3}"
    A=$BUILDCOMPONENT" "$COMPONENT" "$MODE" "$EXTRA

    #echo "Executing: "$A
    eval $A
fi
if [ "$MODE" = "build" ]; then
    EXTRA="${@:3}"
    A=$BUILDCOMPONENT" "$COMPONENT" "$MODE" "$EXTRA

    #echo "Executing: "$A
    eval $A
fi
if [ "$MODE" = "clean" ]; then
    EXTRA="${@:3}"
    A=$BUILDCOMPONENT" "$COMPONENT" "$MODE" "$EXTRA

    #echo "Executing: "$A
    eval $A
fi
if [ "$MODE" = "install" ]; then
    EXTRA="${@:3}"
    A=$BUILDCOMPONENT" "$COMPONENT" clone"
    eval $A
    A=$BUILDCOMPONENT" "$COMPONENT" build "$EXTRA
    eval $A
    A=$BUILDCOMPONENT" "$COMPONENT" clean"
    eval $A
fi
if [ "$MODE" = "install-noclean" ]; then
    EXTRA="${@:3}"
    A=$BUILDCOMPONENT" "$COMPONENT" clone"
    eval $A
    A=$BUILDCOMPONENT" "$COMPONENT" build "$EXTRA
    eval $A
fi
if [ "$MODE" = "status" ]; then
    COMPONENT="$2"
    A=$(dirname "$BASH_SOURCE")/twopi-status
    #echo "Executing: "$A $COMPONENT
    eval $A $COMPONENT
fi
if [ "$MODE" = "init" ]; then
    COMPONENT="$2"
    A=$(dirname "$BASH_SOURCE")/twopi-init
    echo "Executing: " $A "${@:2}"
    eval $A "${@:2}"
fi

