#!/bin/bash
#  twopi user frontend script
#  
#  usage: 
#     clone: clone (or pull) source
#         twopi clone <component> <optional_arguments>
#
#     build: build component from source. Typically it calls either
#            make, cmake, or python setup.py 
#         twopi build <component> <optional_arguments>
#
#     clean: delete files used to install a component
#         default action will delete build files, such as calling
#         rm -rf * in cmake build directory
#         -all will delete the entire source directory
#
#         twopi build <component>
#         twopi build <component> -all
#
#     install: do clone -> build (with options) -> clean

_usage() {
    echo 'twopi : twopi package command'
    echo '   usage:'
    echo '      twopi <command> '
    echo '   command:'
    echo '      clone:'
    echo '      build:'
    echo '      clean:'
    echo '      status:'
    echo '      update:'    
    echo '      init:'
    echo '   command --help : show help for command'    
    exit 1
}   


MODE="$1"
COMPONENT="$2"
BUILDCOMPONENT=$(dirname "$BASH_SOURCE")/../scripts/buildcomponent.sh 

if [ "$MODE" = "--help" ]; then
    _usage
    exit 1
fi

if [ "$MODE" = "clone" ]; then
    EXTRA="${@:3}"
    A=$BUILDCOMPONENT" "$COMPONENT" "$MODE" "$EXTRA

    #echo "Executing: "$A
    eval $A
    
elif [ "$MODE" = "build" ]; then
    EXTRA="${@:3}"
    A=$BUILDCOMPONENT" "$COMPONENT" "$MODE" "$EXTRA

    #echo "Executing: "$A
    eval $A
    
elif [ "$MODE" = "clean" ]; then
    EXTRA="${@:3}"
    A=$BUILDCOMPONENT" "$COMPONENT" "$MODE" "$EXTRA

    #echo "Executing: "$A
    eval $A
    
elif [ "$MODE" = "install" ]; then
    EXTRA="${@:3}"
    A=$BUILDCOMPONENT" "$COMPONENT" clone"
    eval $A
    A=$BUILDCOMPONENT" "$COMPONENT" build "$EXTRA
    eval $A
    A=$BUILDCOMPONENT" "$COMPONENT" clean"
    eval $A
    
elif [ "$MODE" = "install-noclean" ]; then
    EXTRA="${@:3}"
    A=$BUILDCOMPONENT" "$COMPONENT" clone"
    eval $A
    A=$BUILDCOMPONENT" "$COMPONENT" build "$EXTRA
    eval $A

elif [ "$MODE" = "status" ]; then
    EXTRA="${@:2}"
    A=$(dirname "$BASH_SOURCE")/twopi-status"  "${EXTRA}
    #echo "Executing: "$A
    eval $A

elif [ "$MODE" = "config" ]; then
    EXTRA="${@:2}"
    A=$(dirname "$BASH_SOURCE")/twopi-config"  "${EXTRA}
    #echo "Executing: "$A
    eval $A

elif [ "$MODE" = "update" ]; then
    EXTRA="${@:2}"
    A=$(dirname "$BASH_SOURCE")/twopi-update"  "${EXTRA}
    #echo "Executing: "$A
    eval $A

elif [ "$MODE" = "selfupdate" ]; then
    EXTRA="${@:2}"
    A=$(dirname "$BASH_SOURCE")/twopi-selfupdate"  "${EXTRA}
    #echo "Executing: "$A
    eval $A

elif [ "$MODE" = "init" ]; then
    COMPONENT="$2"
    A=$(dirname "$BASH_SOURCE")/twopi-init
    echo "Executing: " $A "${@:2}"
    eval $A "${@:2}"

else
    echo "Unknown mode :""${MODE}"
    exit 1
fi    



